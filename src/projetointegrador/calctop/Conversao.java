/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetointegrador.calctop;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author eduar
 */
public class Conversao extends javax.swing.JFrame {
    DecimalFormat f2 = new DecimalFormat("0.00");
    HistoricoTela h = new HistoricoTela();

    
    //Arduino arduino;
    /**
     * Creates new form TelaPrincipal
     */
    
    public Conversao() {
        initComponents();
        lblErro.setVisible(false);
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        BtnArduino.setVisible(false);
        //arduino = new Arduino("COM5");
        //rduino.initialize();

    }
    
    //Metodo do arduino
    public void ligaBtn(){
        BtnArduino.setVisible(true);
    }
    
    //Metodos para gerar tela
    public void renomearLbl(String nome){
        lblTopConvert.setText(nome);
    }
    public void renomearUnid(int t, String[] n){
        selectUnidade.removeAllItems();
        for (int i = 0; i < t; i++) {
            selectUnidade.addItem(n[i]);
            selectConversor.addItem(n[i]);
        }
    }
    
    //Metodo para validar números negativos
    public void validaNegativo(){
        Historico h = new Historico();
        h.criarArq("historico1", "Valor Negativo - "+lblTopConvert.getText(), true);
        lblErro.setText("Informe um número POSITIVO!");
        lblErro.setVisible(true);
        entradaOriginal.setText("");
        lblResultado.setText("0");
    }
    //Metodo para validar binarios
    
    //Formatar resposta
    public void resp(double res){
        DecimalFormat f4 = new DecimalFormat("0.0000");
        String aux = f4.format(res);
        if(res <= 0)validaNegativo();
        else lblResultado.setText(aux);
        
    }
    //Formatar resposta Temperatura
    public void validaTemp(int t, double ori, double res){
        switch (t){
            case 0: if(ori >= -273.15)respT(res);else erro();break;
            case 1: if(ori >= -459.67)respT(res);else erro();break;
            case 2: if(ori >= 0)respT(res);else erro();break;
        }
    }
    public void respT(double res){
        DecimalFormat f2 = new DecimalFormat("0.00");
        String aux = f2.format(res);
        lblResultado.setText(aux);
    }
    //Metodo Erro
    public void erro(){
        Historico h = new Historico ();
        
        lblErro.setVisible(true);
        //lblErro.setText("Valor vazio.");
        if (selectUnidade.getSelectedIndex() == selectConversor.getSelectedIndex()){
            lblErro.setText("Selecione uma unidade de conversão DIFERENTE!");
            
        }else
            if (entradaOriginal.getText().equals("")){
                lblErro.setText("Valor vazio.");
            }else{
                lblErro.setText("Valor informado INVALIDO!");
               
            }
        lblResultado.setText("0");
        entradaOriginal.setText("");
        h.criarArq("historico1", lblErro.getText()+" - "+lblTopConvert.getText(), true);
    }
    public void erro(boolean valid){
        Historico h = new Historico();
        if(!valid){
            lblErro.setText("Valor informado INVALIDO!");
            lblErro.setVisible(true);
            lblResultado.setText("0");
            entradaOriginal.setText("");
            h.criarArq("historico1", lblErro.getText()+" - "+lblTopConvert.getText(), true); 
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        entradaOriginal = new javax.swing.JTextField();
        selectUnidade = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        selectConversor = new javax.swing.JComboBox<>();
        btnConverter = new javax.swing.JButton();
        lblResultado = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblTopConvert = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblErro = new javax.swing.JLabel();
        lblFormat = new javax.swing.JLabel();
        BtnArduino = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        ajuda = new javax.swing.JMenu();
        inicio = new javax.swing.JMenuItem();
        historico = new javax.swing.JMenuItem();
        sobre = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        sair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuConvertPressao = new javax.swing.JMenuItem();
        menuConvertCapacidade = new javax.swing.JMenuItem();
        menuConvertComprimento = new javax.swing.JMenuItem();
        menuConvertTemperatura = new javax.swing.JMenuItem();
        menuConvertBaseNumerica = new javax.swing.JMenuItem();
        menuConvertGeometria = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CalcTop");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setText("Valor Original");

        entradaOriginal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        entradaOriginal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                entradaOriginalMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                entradaOriginalMousePressed(evt);
            }
        });
        entradaOriginal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradaOriginalActionPerformed(evt);
            }
        });

        selectUnidade.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        selectUnidade.setActionCommand("");
        selectUnidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectUnidadeMouseClicked(evt);
            }
        });
        selectUnidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                selectUnidadeKeyPressed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("Converter Para");

        selectConversor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        selectConversor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectConversorMouseClicked(evt);
            }
        });

        btnConverter.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnConverter.setText("Converter");
        btnConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConverterActionPerformed(evt);
            }
        });

        lblResultado.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblResultado.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblResultado.setText("0");
        lblResultado.setToolTipText("");
        lblResultado.setMaximumSize(new java.awt.Dimension(100, 22));
        lblResultado.setPreferredSize(new java.awt.Dimension(100, 22));

        jPanel1.setBackground(new java.awt.Color(0, 102, 153));

        lblTopConvert.setBackground(new java.awt.Color(0, 0, 0));
        lblTopConvert.setFont(new java.awt.Font("Good Times Rg", 0, 24)); // NOI18N
        lblTopConvert.setForeground(new java.awt.Color(255, 255, 255));
        lblTopConvert.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTopConvert.setText("@nome");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTopConvert, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(lblTopConvert)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setText("De");

        lblErro.setForeground(new java.awt.Color(255, 0, 51));
        lblErro.setText("Valor informado INVÁLIDO!");

        lblFormat.setText(" ");
        lblFormat.setToolTipText("");

        BtnArduino.setText("Ler Sensor");
        BtnArduino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnArduinoActionPerformed(evt);
            }
        });

        ajuda.setText("Arquivo");

        inicio.setText("Inicio");
        inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inicioActionPerformed(evt);
            }
        });
        ajuda.add(inicio);

        historico.setText("Historico");
        historico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historicoActionPerformed(evt);
            }
        });
        ajuda.add(historico);

        sobre.setText("Sobre");
        sobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobreActionPerformed(evt);
            }
        });
        ajuda.add(sobre);
        ajuda.add(jSeparator1);

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        ajuda.add(sair);

        jMenuBar1.add(ajuda);

        jMenu2.setText("Conversões");

        menuConvertPressao.setText("Pressão");
        menuConvertPressao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertPressaoActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertPressao);

        menuConvertCapacidade.setText("Capacidade");
        menuConvertCapacidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertCapacidadeActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertCapacidade);

        menuConvertComprimento.setText("Comprimento");
        menuConvertComprimento.setToolTipText("");
        menuConvertComprimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertComprimentoActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertComprimento);

        menuConvertTemperatura.setText("Temperatura");
        menuConvertTemperatura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertTemperaturaActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertTemperatura);

        menuConvertBaseNumerica.setText("Base Numérica");
        menuConvertBaseNumerica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertBaseNumericaActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertBaseNumerica);

        menuConvertGeometria.setText("Geometria");
        menuConvertGeometria.setToolTipText("");
        menuConvertGeometria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvertGeometriaActionPerformed(evt);
            }
        });
        jMenu2.add(menuConvertGeometria);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27)
                        .addComponent(selectUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectConversor, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConverter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(BtnArduino, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFormat)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblErro))
                            .addComponent(entradaOriginal))))
                .addGap(0, 8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblErro)
                        .addComponent(lblFormat))
                    .addComponent(BtnArduino))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(entradaOriginal, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectConversor, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(btnConverter)
                .addGap(18, 18, 18)
                .addComponent(lblResultado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//Codigos de conversao aqui
    private void btnConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConverterActionPerformed
        Pressao p = new Pressao();
        BasesNumericas b = new BasesNumericas();
        Temperatura t = new Temperatura();
        Comprimento c = new Comprimento();
        Capacidade cp = new Capacidade();
        Geometria g = new Geometria();
        Historico h = new Historico();
        String origem = entradaOriginal.getText().toUpperCase();
        String hist="";
        
        //Receber Entrada
        //String origemTeste = validaNegativo();

        switch (lblTopConvert.getText()){
            //Pressão
            case "Pressao":
                double res;
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                            case 1 : res = p.PsiToBar(Double.parseDouble(origem));resp(res);break;
                            default: erro(); return;
                        }
                    }else {
                        switch (selectConversor.getSelectedIndex()){
                            case 0 : res = p.PsiToBar(Double.parseDouble(origem));resp(res);break;
                            default: erro(); return;
                        }       
                    }
                }catch (NumberFormatException erro){
                    erro();
                    return;
                }
                break;
            //Capacidade
            case "Capacidade":
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                            case 1: res = cp.cmToDmcubicos(Double.parseDouble(origem));resp(res);break;
                            case 2: res = cp.cmToGalao(Double.parseDouble(origem));resp(res);break;
                            case 3: res = cp.cmToLitro(Double.parseDouble(origem));resp(res);break;
                            case 4: res = cp.cmToMtcubico(Double.parseDouble(origem));resp(res);break;
                            case 5: res = cp.cmToql(Double.parseDouble(origem));resp(res);break;
                            default:
                                erro();
                                return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 1){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: res = cp.dmToCmCubico(Double.parseDouble(origem));resp(res);break;
                                case 2: res = cp.dmToGalao(Double.parseDouble(origem));resp(res);break;
                                case 3: res = cp.dmTolitro(Double.parseDouble(origem));resp(res);break;
                                case 4: res = cp.cmToMtcubico(Double.parseDouble(origem));resp(res);break;
                                case 5: res = cp.cmToql(Double.parseDouble(origem));resp(res);break;
                                default:erro();
                                return;    
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 2){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: res = cp.galaoTocmcubicos(Double.parseDouble(origem));resp(res);break;
                                case 1: res = cp.galaoTodmcubicos(Double.parseDouble(origem));resp(res);break;
                                case 3: res = cp.galaoTolitros(Double.parseDouble(origem));resp(res);break;
                                case 4: res = cp.galaoTomcubicos(Double.parseDouble(origem));resp(res);break;
                                case 5: res = cp.galaoToquilolitros(Double.parseDouble(origem));resp(res);break;
                                default:erro();
                                return;    
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 3){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: res = cp.litroToCmcubico(Double.parseDouble(origem));resp(res);break;
                                case 1: res = cp.litroToDmcubico(Double.parseDouble(origem));resp(res);break;
                                case 2: res = cp.litroToGalao(Double.parseDouble(origem));resp(res);break;
                                case 4: res = cp.litroToMetcubico(Double.parseDouble(origem));resp(res);break;
                                case 5: res = cp.litroToquilolitro(Double.parseDouble(origem));resp(res);break;
                                default:erro();
                                return;    
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 4){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: res = cp.metroToCmCubicos(Double.parseDouble(origem));resp(res);break;
                                case 1: res = cp.metroToDmCubicos(Double.parseDouble(origem));resp(res);break;
                                case 2: res = cp.metroToGalao(Double.parseDouble(origem));resp(res);break;
                                case 3: res = cp.metroTolitro(Double.parseDouble(origem));resp(res);break;
                                case 5: res = cp.metroToQl(Double.parseDouble(origem));resp(res);break;
                                default:erro();
                                return;    
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 5){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: res = cp.qlToCmcubicos(Double.parseDouble(origem));resp(res);break;
                                case 1: res = cp.qlToDmCubicos(Double.parseDouble(origem));resp(res);break;
                                case 2: res = cp.qlToGalao(Double.parseDouble(origem));resp(res);break;
                                case 3: res = cp.qlToLitro(Double.parseDouble(origem));resp(res);break;
                                case 4: res = cp.qlToMtcubico(Double.parseDouble(origem));resp(res);break;
                                default:erro();
                                return;    
                            }
                    }
                }catch(NumberFormatException e){
                    erro();
                    return;
            }
                    
                
            break;    
            //Comprimento
            case "Comprimento":
                
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                            case 1: res = c.MetToMi(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 2: res = c.MetToPol(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 3: res = c.MetToKM(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            default:erro();
                            return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 1){
                        switch (selectConversor.getSelectedIndex()){
                            case 0: res = c.MiToMet(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 2: res = c.MiToPol(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 3: res = c.MiToKm(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            default:erro();
                            return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 2){
                        switch (selectConversor.getSelectedIndex()){
                            case 0: res = c.PolToMet(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 1: res = c.PolToMi(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 3: res = c.PolToKm(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            default:erro();
                            return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 3){
                        switch (selectConversor.getSelectedIndex()){
                            case 0: res = c.KmToMet(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 1: res = c.KmToMi(Double.parseDouble(entradaOriginal.getText())); resp(res);break;
                            case 2: res = c.KmToPol(Double.parseDouble(entradaOriginal.getText())); resp(res);break; 
                            default:erro();
                            return;
                        }
                    }
                }catch (NumberFormatException e){
                    erro();
                    return;
                }
                break;
            //Temperatura
            case "Temperatura":
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                            case 1: res = t.CelToFah(Double.parseDouble(entradaOriginal.getText()));validaTemp(0, Double.parseDouble(origem), res);break;
                            case 2: res = t.CelToKel(Double.parseDouble(entradaOriginal.getText())); validaTemp(0, Double.parseDouble(origem),res);break;
                            default: erro(); return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 1){
                            switch (selectConversor.getSelectedIndex()){
                            case 0: res = t.FahToCel(Double.parseDouble(entradaOriginal.getText())); validaTemp(1,Double.parseDouble(origem), res);break;
                            case 2: res = t.FahToKel(Double.parseDouble(entradaOriginal.getText())); validaTemp(1, Double.parseDouble(origem),res);break;
                            default:erro();return;
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 2){
                            switch (selectConversor.getSelectedIndex()){
                            case 0: res = t.KelToCel(Double.parseDouble(entradaOriginal.getText())); validaTemp(2, Double.parseDouble(origem),res);break;
                            case 1: res = t.KelToFah(Double.parseDouble(entradaOriginal.getText())); validaTemp(2, Double.parseDouble(origem),res);break;
                            default:erro();return;
                            }
                        }
                }catch (NumberFormatException erro){
                    erro();
                    return;
                }
                break;
            //Base Numerica    
            case "Base Numérica":
                int resInt;
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                                case 1: if(b.verificaBin(origem)){
                                    resInt = b.binToDec(origem);
                                    lblResultado.setText(Integer.toString(resInt));
                                    }else erro(b.verificaBin(origem));break;
                                case 2: if(b.verificaBin(origem)) lblResultado.setText(b.binToHex(origem));else erro(b.verificaBin(origem));break;
                                case 3: if(b.verificaBin(origem)) lblResultado.setText(b.binToOct(origem));else erro(b.verificaBin(origem));break;
                                default:erro();
                                return;
                        }
                    }else
                        if(selectUnidade.getSelectedIndex() == 1){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: String res1 = b.decToBin(Integer.parseInt(entradaOriginal.getText())); lblResultado.setText(res1);break;
                                case 2: String res1_1 = b.decToHex(Integer.parseInt(entradaOriginal.getText())); lblResultado.setText(res1_1);break;
                                case 3: String res1_2 = b.decToOct(Integer.parseInt(entradaOriginal.getText())); lblResultado.setText(res1_2);break;
                                default:erro();
                                return;
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 2){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: if(b.verificaHex(origem)) lblResultado.setText(b.hexToBin(origem));else erro(b.verificaHex(origem));break;
                                case 1: if(b.verificaHex(origem)){
                                    resInt = b.hexToDec(origem);
                                    lblResultado.setText(Integer.toString(resInt));
                                    }else erro(b.verificaHex(origem));break;
                                case 3: if(b.verificaHex(origem)) lblResultado.setText(b.hexToOct(origem));else erro(b.verificaHex(origem));break;
                                default:erro();
                                return;
                            }
                    }else
                        if(selectUnidade.getSelectedIndex() == 3){
                            switch (selectConversor.getSelectedIndex()){
                                case 0: if(b.verificaOct(origem)) lblResultado.setText(b.octToBin(origem));else erro(b.verificaOct(origem));break;
                                case 1: if(b.verificaOct(origem)){
                                    resInt = b.octToDec(origem);
                                    lblResultado.setText(Integer.toString(resInt));
                                    }else erro(b.verificaOct(origem));break;
                                case 2: if(b.verificaOct(origem)) lblResultado.setText(b.octToHex(origem));else erro(b.verificaOct(origem));break;
                                default:erro();
                                return;
                            }
                        }
                }catch (NumberFormatException erro){
                    erro();
                    return;
                }
                    break;
            //Geometria        
            case "Geometria":
                try{
                    if(selectUnidade.getSelectedIndex() == 0){
                        switch (selectConversor.getSelectedIndex()){
                            case 1: double res1 = g.grauToRad(Double.parseDouble(entradaOriginal.getText())); lblResultado.setText(Double.toString(res1));break;
                            default:erro();
                            return;
                        }
                    }else{
                        switch (selectConversor.getSelectedIndex()){
                            case 0: double res1 = g.radToGrau(Double.parseDouble(entradaOriginal.getText())); lblResultado.setText(Double.toString(res1));break;
                            default:erro();
                            return;
                        }
                    }
                }catch (NumberFormatException erro){
                    erro();
                    return;
                }
        }
        hist = h.gerarHist(entradaOriginal.getText(), selectUnidade.getItemAt(selectUnidade.getSelectedIndex()), selectConversor.getItemAt(selectConversor.getSelectedIndex()), lblResultado.getText());
        h.criarArq("historico1", hist, true);
    }//GEN-LAST:event_btnConverterActionPerformed

    private void menuConvertPressaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertPressaoActionPerformed
        Conversao c = new Conversao();
        String []n = {"PSI","BAR"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Pressao");
        c.renomearUnid(2, n);
    }//GEN-LAST:event_menuConvertPressaoActionPerformed

    private void menuConvertCapacidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertCapacidadeActionPerformed
        Conversao c = new Conversao();
        String n[] = {"Cm³", "Dm³","Galão","Litro","M³","Quilolitro"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Capacidade");
        c.renomearUnid(6, n);
    }//GEN-LAST:event_menuConvertCapacidadeActionPerformed

    private void menuConvertComprimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertComprimentoActionPerformed
        Conversao c = new Conversao();
        String []n = {"Metro","Milhas","Polegada","Quilômetro"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Comprimento");
        c.renomearUnid(4, n);
    }//GEN-LAST:event_menuConvertComprimentoActionPerformed

    private void menuConvertTemperaturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertTemperaturaActionPerformed
        Conversao c = new Conversao();
        String n[] = {"Celsius","Fahrenheit","Kelvin"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Temperatura");
        c.renomearUnid(3, n);
    }//GEN-LAST:event_menuConvertTemperaturaActionPerformed

    private void menuConvertBaseNumericaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertBaseNumericaActionPerformed
        Conversao c = new Conversao();
        String n[] = {"Binária","Decimal","Hexadecimal","Octal"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Base Numérica");
        c.renomearUnid(4, n);
    }//GEN-LAST:event_menuConvertBaseNumericaActionPerformed

    private void menuConvertGeometriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvertGeometriaActionPerformed
        Conversao c = new Conversao();
        String []n = {"Graus","Radianos"};
        this.dispose();
        c.setVisible(true);
        c.renomearLbl("Geometria");
        c.renomearUnid(2, n);    
    }//GEN-LAST:event_menuConvertGeometriaActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_sairActionPerformed

    private void historicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historicoActionPerformed
        
        h.setVisible(true);
    }//GEN-LAST:event_historicoActionPerformed

    private void inicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inicioActionPerformed
        TelaPrincipal t = new TelaPrincipal();
        this.dispose();
        t.setVisible(true);
    }//GEN-LAST:event_inicioActionPerformed

    private void entradaOriginalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradaOriginalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entradaOriginalActionPerformed

    private void sobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobreActionPerformed
        Sobre s = new Sobre();
        //this.dispose();
        s.setVisible(true);
    }//GEN-LAST:event_sobreActionPerformed

    private void entradaOriginalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entradaOriginalMouseClicked
        lblErro.setVisible(false);
    }//GEN-LAST:event_entradaOriginalMouseClicked

    private void selectUnidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_selectUnidadeKeyPressed
    }//GEN-LAST:event_selectUnidadeKeyPressed

    private void selectUnidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectUnidadeMouseClicked
        lblErro.setVisible(false);
    }//GEN-LAST:event_selectUnidadeMouseClicked

    private void selectConversorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectConversorMouseClicked
        lblErro.setVisible(false);
    }//GEN-LAST:event_selectConversorMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        lblErro.setVisible(false);
    }//GEN-LAST:event_formMouseClicked

    private void entradaOriginalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_entradaOriginalMousePressed
        lblErro.setVisible(false);
    }//GEN-LAST:event_entradaOriginalMousePressed

    private void BtnArduinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnArduinoActionPerformed
        // TODO add your handling code here:
        
        //entradaOriginal.setText(arduino.read());
        //selectUnidade.setSelectedIndex(0);

    }//GEN-LAST:event_BtnArduinoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Conversao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Conversao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Conversao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Conversao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Conversao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnArduino;
    private javax.swing.JMenu ajuda;
    private javax.swing.JButton btnConverter;
    private javax.swing.JTextField entradaOriginal;
    private javax.swing.JMenuItem historico;
    private javax.swing.JMenuItem inicio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel lblErro;
    private javax.swing.JLabel lblFormat;
    private javax.swing.JLabel lblResultado;
    private javax.swing.JLabel lblTopConvert;
    private javax.swing.JMenuItem menuConvertBaseNumerica;
    private javax.swing.JMenuItem menuConvertCapacidade;
    private javax.swing.JMenuItem menuConvertComprimento;
    private javax.swing.JMenuItem menuConvertGeometria;
    private javax.swing.JMenuItem menuConvertPressao;
    private javax.swing.JMenuItem menuConvertTemperatura;
    private javax.swing.JMenuItem sair;
    private javax.swing.JComboBox<String> selectConversor;
    private javax.swing.JComboBox<String> selectUnidade;
    private javax.swing.JMenuItem sobre;
    // End of variables declaration//GEN-END:variables
}
